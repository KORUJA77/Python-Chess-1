Position:
	int x - x coordinate of the position (0-7). Represents a-h on the board.
	int y - y coordinate of the position (0-7). Represents 1-8 on the board.

Piece:
	Position pos - Position of the piece on the board.
	boolean isWhite - Whether the piece is white or black.

Piece Subclasses (Pawn, Knight, Bishop, Rook, Queen, King):
	getAllMoves(self)
		Gets all the possible moves of the given piece, given its position.
		Returns a list of Position, where the piece could move to.

	getLegalMovesExcludingCheck(self, white_pieces, black_pieces)
		Gets a list of all legal moves for a pieces given the current pieces
		on the board, but does not include check. For example, in the following position
		(Upper case - White Piece, Lower case - Black Piece):
		7 - - - - - - - -
		6 - - - - - b - -
		5 - - - - P - - -
		4 - - - K - - - -
		3 - - - - - - - -
		2 - - - - - - - -
		1 - - - - - - - -
		0 - - - - - - - -
		  0 1 2 3 4 5 6 7
		The method would return [(4, 6), (5, 6)] for the white pawn.
		This will include everything else. For example, en passant and castling
		will be implemented.

	getLegalMoves(self, white_pieces, black_pieces, black_king, white_king)
		Gets all the legal moves for a piece, given the current pieces on
		the board. For example, if a piece is in front of a pawn, its position will
		not be included in the legal moves for that pawn. Returns a list of positions that are legal moves.

Pawn:
	May need special behaviors for en passant and pawn advancement to final rank. This may be within the board, or within the pawn. Undecided.

King/Rook:
	Will need boolean for whether the piece has moved for implementing castling.


Board:
	white_king - Reference to the white king, useful for validating check.
	black_king - Reference to the black king, useful for validating check.
	white_pieces - Dictionary of position -> piece. Contains all white pieces, including king.
	black_pieces - Dictionary of position -> piece. Contains all black pieces, including king.
	whites_turn - Whether it is black or white's turn
	player_white - The player for white
	player_black - The player for black
	board_cache - List of white_pieces/black_pieces tuples that will be used to determine 3-fold repetition.

Utility Methods:

	inCheck(white_pieces, black_pieces, king)
		Checks whether white/black is currently in check based on the current board. Based on whether it is the black king or the white king.

	inCheckmate(white_pieces, black+pieces, king)
		Checks whether white/black is currently in checkmate based on the current board. Based on whether it is the black king or the white king.


Draw by 3-fold repetition:
	Maintain a list of previous boards. If a board is contained in there twice, and is reached in the next position, then the option to draw is given to both players.

Player:
	isWhite - Whether the player is black or white
	isHuman - Whether the player is a human or a CPU. Before engine is implemented, player will always be human.

